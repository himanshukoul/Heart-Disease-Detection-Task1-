# -*- coding: utf-8 -*-
"""Heart_Pred.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CAks6jEig9D-QveXK52XOwcsZL0n2u8y

# New Section
"""

import pandas as pd
import numpy as np

dataset = pd.read_csv("heart_disease_data.csv")
x = dataset.iloc[:,:-1].values
y = dataset.iloc[:,-1].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25,random_state=0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
#dont fit testset as data will be leaked(overfitting)
x_test = sc.transform(x_test)
print("give a list with 13 params for heart disease")
#eg [23,1,2,150,211,1,0,160,0,3.6,1,1,2]
x_input = eval(input())

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state=0)
classifier.fit(x_train,y_train)
y_pred = classifier.predict(x_test)
print(classifier.predict(sc.transform([x_input])))
from sklearn.metrics import accuracy_score,confusion_matrix
print(confusion_matrix(y_test,y_pred))
print(accuracy_score(y_test,y_pred))

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=5,metric='manhattan')
classifier.fit(x_train,y_train)
y_pred = classifier.predict(x_test)
print(classifier.predict(sc.transform([x_input])))
from sklearn.metrics import accuracy_score,confusion_matrix
print(confusion_matrix(y_test,y_pred))
print(accuracy_score(y_test,y_pred))

from sklearn.svm import SVC
classifier = SVC(kernel = 'rbf', random_state = 0)
classifier.fit(x_train,y_train)
y_pred = classifier.predict(x_test)
print(classifier.predict(sc.transform([x_input])))
from sklearn.metrics import accuracy_score,confusion_matrix
print(confusion_matrix(y_test,y_pred))
print(accuracy_score(y_test,y_pred))

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(x_train,y_train)
y_pred = classifier.predict(x_test)
print(classifier.predict(sc.transform([x_input])))
from sklearn.metrics import accuracy_score,confusion_matrix
print(confusion_matrix(y_test,y_pred))
print(accuracy_score(y_test,y_pred))

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion = 'log_loss', random_state = 5)
classifier.fit(x_train,y_train)
y_pred = classifier.predict(x_test)
print(classifier.predict(sc.transform([x_input])))
from sklearn.metrics import accuracy_score,confusion_matrix
print(confusion_matrix(y_test,y_pred))
print(accuracy_score(y_test,y_pred))

from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 19, criterion = 'entropy', random_state = 0)
classifier.fit(x_train,y_train)
y_pred = classifier.predict(x_test)
print(classifier.predict(sc.transform([x_input])))
from sklearn.metrics import accuracy_score,confusion_matrix
print(confusion_matrix(y_test,y_pred))
print(accuracy_score(y_test,y_pred))